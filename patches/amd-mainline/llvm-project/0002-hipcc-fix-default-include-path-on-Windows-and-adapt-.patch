From d70e7d2166d478ead5d9bd3f6e4b1408190ea666 Mon Sep 17 00:00:00 2001
From: Scott Tsai <scottt.tw@gmail.com>
Date: Tue, 15 Apr 2025 09:30:13 +0800
Subject: [PATCH 2/5] hipcc: fix default include path on Windows and adapt to
 TheRock rocm layout

getCppConfig in the orignial code did not add the content of
`getHipPath()` to the default C Preprocessor definitions in the
`if (isWindows())` path.

Change default `hipClangPath` to look for clang under `lib/llvm/bin`
like Linux instead of expecting `clang.exe` to be next to `hipcc.exe`.

Change output of `hipcc.exe --ldflags` to use Windows "\" path
separators to make the output obviously correct.
---
 amd/hipcc/src/hipBin_amd.h | 60 ++++++++++++++------------------------
 1 file changed, 22 insertions(+), 38 deletions(-)

diff --git a/amd/hipcc/src/hipBin_amd.h b/amd/hipcc/src/hipBin_amd.h
index ecea39e071b4..c74b43ff598f 100644
--- a/amd/hipcc/src/hipBin_amd.h
+++ b/amd/hipcc/src/hipBin_amd.h
@@ -201,16 +201,11 @@ void HipBinAmd::constructCompilerPath() {
   const EnvVariables& envVariables = getEnvVariables();
   if (envVariables.hipClangPathEnv_.empty()) {
     fs::path hipClangPath;
-    if (isWindows()) {
-      compilerPath = getHipPath();
-      hipClangPath = compilerPath;
-      hipClangPath /= "bin";
-    } else {
-      compilerPath = getRoccmPath();
-      hipClangPath = compilerPath;
-      hipClangPath /= "lib/llvm/bin";
-    }
-
+    compilerPath = getRoccmPath();
+    hipClangPath = compilerPath;
+    hipClangPath /= "lib";
+    hipClangPath /= "llvm";
+    hipClangPath /= "bin";
     compilerPath = hipClangPath.string();
   } else {
     compilerPath = envVariables.hipClangPathEnv_;
@@ -226,32 +221,17 @@ const string& HipBinAmd::getCompilerPath() const {
 void HipBinAmd::printCompilerInfo() const {
   const string& hipClangPath = getCompilerPath();
   const string& hipPath = getHipPath();
-  if (isWindows()) {
-    string cmd = hipClangPath + "/clang++ --version";
-    system(cmd.c_str());  // hipclang version
-    cout << "llc-version :" << endl;
-    cmd = hipClangPath + "/llc --version";
-    system(cmd.c_str());  // llc version
-    cout << "hip-clang-cxxflags :" << endl;
-    cmd = hipPath + "/bin/hipcc  --cxxflags";
-    system(cmd.c_str());  // cxx flags
-    cout << endl << "hip-clang-ldflags :" << endl;
-    cmd = hipPath + "/bin/hipcc --ldflags";
-    system(cmd.c_str());  // ld flags
-    cout << endl;
-  } else {
-    string cmd = hipClangPath + "/clang++ --version";
-    system(cmd.c_str());  // hipclang version
-    cmd = hipClangPath + "/llc --version";
-    system(cmd.c_str());  // llc version
-    cout << "hip-clang-cxxflags :" << endl;
-    cmd = hipPath + "/bin/hipcc --cxxflags";
-    system(cmd.c_str());  // cxx flags
-    cout << endl << "hip-clang-ldflags :" << endl;
-    cmd = hipPath + "/bin/hipcc --ldflags";
-    system(cmd.c_str());  // ldflags version
-    cout << endl;
-  }
+  string cmd = hipClangPath + "/clang++ --version";
+  system(cmd.c_str());  // hipclang version
+  cmd = hipClangPath + "/llc --version";
+  system(cmd.c_str());  // llc version
+  cout << "hip-clang-cxxflags :" << endl;
+  cmd = hipPath + "/bin/hipcc --cxxflags";
+  system(cmd.c_str());  // cxx flags
+  cout << endl << "hip-clang-ldflags :" << endl;
+  cmd = hipPath + "/bin/hipcc --ldflags";
+  system(cmd.c_str());  // ldflags version
+  cout << endl;
 }
 
 string HipBinAmd::getCompilerVersion() {
@@ -293,17 +273,19 @@ string HipBinAmd::getCppConfig() {
   hipPathInclude = hipPath;
   hipPathInclude /= "include";
   if (isWindows()) {
+    // -I{hipPathInclude}/
     cppConfig += " -I" + hipPathInclude.string();
     cppConfigFs = cppConfig;
     cppConfigFs /= "/";
   } else {
+    // -I{hipPathInclude} -I{hsaPath}/include
     const string& hsaPath = getHsaPath();
     cppConfig += " -I" + hipPathInclude.string() +
                  " -I" + hsaPath;
     cppConfigFs = cppConfig;
     cppConfigFs /= "include";
-    cppConfig = cppConfigFs.string();
   }
+  cppConfig = cppConfigFs.string();
   return cppConfig;
 }
 
@@ -874,7 +856,9 @@ void HipBinAmd::executeHipCCCmd(vector<string> argv) {
 
   // to avoid using dk linker or MSVC linker
   if (isWindows()) {
-    HIPLDFLAGS += " -fuse-ld=lld --ld-path=\"" + hipClangPath + "/lld-link.exe\"";
+    fs::path ldPath = hipClangPath;
+    ldPath /= "lld-link.exe";
+    HIPLDFLAGS += " -fuse-ld=lld --ld-path=\"" + ldPath.string() + "\"";
   }
 
   if (!compileOnly) {
-- 
2.47.1.windows.2

