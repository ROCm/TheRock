From 31e9657f99a5e682ed79365353ea2fb1c5b6e8e9 Mon Sep 17 00:00:00 2001
From: Mika Laitio <mika.laitio@amd.com>
Date: Tue, 9 Sep 2025 09:44:48 -0700
Subject: [PATCH 3/5] rocFFT integration with fftw-3.3.10 cmake variables

Use the cmake environment variables that the upstream FFTW3
release 3.3.10 returns for cmake find_package when searching
the FFTW and FFTWf.
(double precision version and single/float precision version of fftw).

These variables are little different compared to one that the
rocFFT's set originally in case of building the fftw library itself
or by using the own FindFFTW.cmake wrapper.

1) FFTW_FOUND -->  FFTW3_FOUND and FFTW3f_FOUND
2) FFTW_INCLUDE_DIRS --> FFTW3_INCLUDE_DIRS
3) FFTW_LIBRARIES
    -->FFTW3::fftw3 and
       FFTW3::fftw3f

FFTW3q and FFTW3qd versions of libraries are not needed
or tried to be found at the moment.
(128 bit quadruple prevision and quad double precision)

Signed-off-by: Mika Laitio <mika.laitio@amd.com>
---
 projects/rocfft/clients/tests/CMakeLists.txt  |  28 ++--
 .../rocfft/clients/tests/cmake/FindFFTW.cmake | 131 ------------------
 2 files changed, 16 insertions(+), 143 deletions(-)
 delete mode 100644 projects/rocfft/clients/tests/cmake/FindFFTW.cmake

diff --git a/projects/rocfft/clients/tests/CMakeLists.txt b/projects/rocfft/clients/tests/CMakeLists.txt
index 3e49f2345a..2894173bf5 100644
--- a/projects/rocfft/clients/tests/CMakeLists.txt
+++ b/projects/rocfft/clients/tests/CMakeLists.txt
@@ -108,7 +108,8 @@ option( BUILD_FFTW "Download and build FFTW" OFF )
 
 # look for installed FFTW if we weren't asked to build it
 if( NOT BUILD_FFTW )
-  find_package( FFTW 3.0 MODULE COMPONENTS FLOAT DOUBLE )
+  find_package(FFTW3 CONFIG REQUIRED)
+  find_package(FFTW3f CONFIG REQUIRED)
 endif()
 
 include( ExternalProject )
@@ -118,7 +119,7 @@ if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.24)
 endif()
 
 # also try to build FFTW if FFTW isn't present
-if( BUILD_FFTW OR NOT FFTW_FOUND )
+if( BUILD_FFTW OR NOT FFTW3_FOUND OR NOT FFTW3f_FOUND )
   set(FFTW_LIBRARIES_DOUBLE
       ${CMAKE_CURRENT_BINARY_DIR}/src/fftw_double-build/${CMAKE_SHARED_LIBRARY_PREFIX}fftw3_threads${CMAKE_SHARED_LIBRARY_SUFFIX}
       ${CMAKE_CURRENT_BINARY_DIR}/src/fftw_double-build/${CMAKE_SHARED_LIBRARY_PREFIX}fftw3${CMAKE_SHARED_LIBRARY_SUFFIX})
@@ -159,11 +160,12 @@ if( BUILD_FFTW OR NOT FFTW_FOUND )
                       DEPENDS fftw_double)
   ExternalProject_Get_Property( fftw_single source_dir binary_dir )
 
-  set(FFTW_INCLUDES
+  set(FFTW3_INCLUDE_DIRS
       ${CMAKE_CURRENT_BINARY_DIR}/src/fftw/api)
-  set(FFTW_LIBRARIES
-      ${FFTW_LIBRARIES_DOUBLE}
+  set(FFTW3::fftw3f
       ${FFTW_LIBRARIES_SINGLE})
+  set(FFTW3::fftw3
+      ${FFTW_LIBRARIES_DOUBLE})
 
   # FFTW we build is always threaded
   set( FFTW_MULTITHREAD TRUE )
@@ -175,18 +177,18 @@ if( BUILD_FFTW OR NOT FFTW_FOUND )
     COMPONENT clients-common
   )
 else()
-  include_directories(${FFTW_INCLUDE_DIRS})
+  include_directories(${FFTW3_INCLUDE_DIRS})
 endif()
 
 set( rocfft-test_include_dirs
   $<BUILD_INTERFACE:${Boost_INCLUDE_DIRS}>
-  $<BUILD_INTERFACE:${FFTW_INCLUDES}>
+  $<BUILD_INTERFACE:${FFTW3_INCLUDE_DIRS}>
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../library/src/include>
   ${ROCM_CLANG_ROOT}/include
   )
 
 set( rocfft-test_link_libs
-  ${FFTW_LIBRARIES}
+  FFTW3::fftw3 FFTW3::fftw3f
   )
 
 option( BUILD_CLIENTS_TESTS_OPENMP "Build tests with OpenMP" ON )
@@ -357,7 +359,7 @@ if( ROCFFT_MPI_ENABLE )
         INSTALL_RPATH "${INSTALL_RPATH}"
       )
     endif()
-    if( BUILD_FFTW  OR NOT FFTW_FOUND )
+    if( BUILD_FFTW OR NOT FFTW3_FOUND )
       add_dependencies( ${worker} fftw_double fftw_single )
     endif()
     target_include_directories( ${worker}
@@ -365,7 +367,7 @@ if( ROCFFT_MPI_ENABLE )
       ${CMAKE_BINARY_DIR}/include
       ${CMAKE_CURRENT_SOURCE_DIR}/../../library/include/
       ${MPI_C_INCLUDE_PATH}
-      $<BUILD_INTERFACE:${FFTW_INCLUDES}>
+      $<BUILD_INTERFACE:${FFTW3_INCLUDE_DIRS}>
     )
     target_compile_options( ${worker} PRIVATE ${WARNING_FLAGS} )
 
@@ -375,7 +377,8 @@ if( ROCFFT_MPI_ENABLE )
       hip::hiprand
       hip::device
       MPI::MPI_CXX
-      ${FFTW_LIBRARIES}
+      FFTW3::fftw3
+      FFTW3::fftw3f
       "mpi_gtl_hsa"
     )
       get_filename_component( MPI_LIBDIR ${MPI_LIBRARY} DIRECTORY )
@@ -388,7 +391,8 @@ if( ROCFFT_MPI_ENABLE )
       hip::hiprand
       hip::device
       MPI::MPI_CXX
-      ${FFTW_LIBRARIES}
+      FFTW3::fftw3
+      FFTW3::fftw3f
     )    
     endif()
     set_target_properties(${worker}
diff --git a/projects/rocfft/clients/tests/cmake/FindFFTW.cmake b/projects/rocfft/clients/tests/cmake/FindFFTW.cmake
deleted file mode 100644
index c177da6995..0000000000
--- a/projects/rocfft/clients/tests/cmake/FindFFTW.cmake
+++ /dev/null
@@ -1,131 +0,0 @@
-# #############################################################################
-# Copyright (C) 2016 - 2022 Advanced Micro Devices, Inc. All rights reserved.
-#
-# Permission is hereby granted, free of charge, to any person obtaining a copy
-# of this software and associated documentation files (the "Software"), to deal
-# in the Software without restriction, including without limitation the rights
-# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-# copies of the Software, and to permit persons to whom the Software is
-# furnished to do so, subject to the following conditions:
-#
-# The above copyright notice and this permission notice shall be included in
-# all copies or substantial portions of the Software.
-#
-# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
-# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-# THE SOFTWARE.
-# #############################################################################
-
-#if( FFTW_FIND_VERSION VERSION_LESS "3" )
-#    message( FFTW_FIND_VERION is ${FFTW_FIND_VERSION})
-#    message( FATAL_ERROR "FindFFTW can not configure versions less than FFTW 3.0.0" )
-#endif( )
-
-find_path(FFTW_INCLUDE_DIRS
-    NAMES fftw3.h
-    HINTS
-        ${FFTW_ROOT}/include
-        $ENV{FFTW_ROOT}/include
-    PATHS
-        /usr/include
-        /usr/local/include
-)
-mark_as_advanced( FFTW_INCLUDE_DIRS )
-
-# message( STATUS "FFTW_FIND_COMPONENTS: ${FFTW_FIND_COMPONENTS}" )
-# message( STATUS "FFTW_FIND_REQUIRED_FLOAT: ${FFTW_FIND_REQUIRED_FLOAT}" )
-# message( STATUS "FFTW_FIND_REQUIRED_DOUBLE: ${FFTW_FIND_REQUIRED_DOUBLE}" )
-
-include( CheckSymbolExists )
-
-set( FFTW_LIBRARIES "" )
-if( FFTW_FIND_REQUIRED_FLOAT OR FFTW_FIND_REQUIRED_SINGLE )
-  find_library( FFTW_LIBRARIES_SINGLE
-      NAMES fftw3f fftw3f-3 fftw3 fftw3-3
-      HINTS
-          ${FFTW_ROOT}/lib
-          $ENV{FFTW_ROOT}/lib
-      PATHS
-          /usr/lib
-          /usr/local/lib
-      PATH_SUFFIXES
-          x86_64-linux-gnu
-      DOC "FFTW dynamic library single"
-  )
-  mark_as_advanced( FFTW_LIBRARIES_SINGLE )
-  list( APPEND FFTW_LIBRARIES ${FFTW_LIBRARIES_SINGLE} )
-
-  # Look for omp (preferred) or thread libraries.  These are not a
-  # hard requirement, but are nice to have to make FFTW run faster.
-  find_library( FFTWF_OMP_LIBRARY fftw3f_omp )
-  find_library( FFTWF_THREADS_LIBRARY fftw3f_threads )
-  if( FFTWF_OMP_LIBRARY )
-    list( APPEND FFTW_LIBRARIES ${FFTWF_OMP_LIBRARY} )
-    set( FFTW_MULTITHREAD TRUE )
-  elseif( FFTWF_THREADS_LIBRARY )
-    list( APPEND FFTW_LIBRARIES ${FFTWF_THREADS_LIBRARY} )
-    set( FFTW_MULTITHREAD TRUE )
-  endif()
-
-  list( APPEND CMAKE_REQUIRED_LIBRARIES ${FFTW_LIBRARIES_SINGLE} )
-  check_symbol_exists( fftwf_sprint_plan "fftw3.h" FFTW_HAVE_SPRINT_PLAN )
-endif( )
-
-if( FFTW_FIND_REQUIRED_DOUBLE )
-  find_library( FFTW_LIBRARIES_DOUBLE
-      NAMES fftw3
-      HINTS
-          ${FFTW_ROOT}/lib
-          $ENV{FFTW_ROOT}/lib
-      PATHS
-          /usr/lib
-          /usr/local/lib
-      PATH_SUFFIXES
-          x86_64-linux-gnu
-      DOC "FFTW dynamic library double"
-  )
-  mark_as_advanced( FFTW_LIBRARIES_DOUBLE )
-  list( APPEND FFTW_LIBRARIES ${FFTW_LIBRARIES_DOUBLE} )
-
-  # Look for omp (preferred) or thread libraries.  These are not a
-  # hard requirement, but are nice to have to make FFTW run faster.
-  find_library( FFTW_OMP_LIBRARY fftw3_omp )
-  find_library( FFTW_THREADS_LIBRARY fftw3_threads )
-  if( FFTW_OMP_LIBRARY )
-    list( APPEND FFTW_LIBRARIES ${FFTW_OMP_LIBRARY} )
-    set( FFTW_MULTITHREAD TRUE )
-  elseif( FFTW_THREADS_LIBRARY )
-    list( APPEND FFTW_LIBRARIES ${FFTW_THREADS_LIBRARY} )
-    set( FFTW_MULTITHREAD TRUE )
-  endif()
-
-  list( APPEND CMAKE_REQUIRED_LIBRARIES ${FFTW_LIBRARIES_DOUBLE} )
-  check_symbol_exists( fftw_sprint_plan "fftw3.h" FFTW_HAVE_SPRINT_PLAN )
-endif( )
-
-if( BUILD_FFTW OR FFTW_HAVE_SPRINT_PLAN )
-  target_compile_definitions( rocfft-test PUBLIC FFTW_HAVE_SPRINT_PLAN )
-endif()
-
-include( FindPackageHandleStandardArgs )
-FIND_PACKAGE_HANDLE_STANDARD_ARGS( FFTW
-    REQUIRED_VARS FFTW_INCLUDE_DIRS FFTW_LIBRARIES )
-
-# assume the threads feature is always enabled on Windows, since it's
-# not a separate library there
-if( FFTW_FOUND AND WIN32 )
-  set( FFTW_MULTITHREAD TRUE )
-endif()
-
-if( NOT FFTW_FOUND )
-    message( STATUS "FindFFTW could not find all of the following fftw libraries" )
-    message( STATUS "${FFTW_FIND_COMPONENTS}" )
-else( )
-    message(STATUS "FindFFTW configured variables:" )
-    message(STATUS "FFTW_INCLUDE_DIRS: ${FFTW_INCLUDE_DIRS}" )
-    message(STATUS "FFTW_LIBRARIES: ${FFTW_LIBRARIES}" )
-endif()
-- 
2.43.0

