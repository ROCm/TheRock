From bc5f5ae3e4a45539aa8f1e6600dd40eee20c5c4b Mon Sep 17 00:00:00 2001
From: umarinkovic <uros.marinkovic@htecgroup.com>
Date: Mon, 29 Sep 2025 18:07:18 +0000
Subject: [PATCH] Added support for gfx103X targets in rocBLAS

---
 projects/rocblas/CMakeLists.txt               |  12 +-
 projects/rocblas/library/src/handle.cpp       |  24 ++
 .../rocblas/library/src/include/handle.hpp    |   2 +
 projects/rocblas/library/src/tensile_host.cpp |  24 ++
 shared/tensile/Tensile/AsmCaps.py             | 220 ++++++++++++++++++
 shared/tensile/Tensile/Common.py              |   4 +-
 .../cmake/TensileSupportedArchitectures.cmake |   2 +
 .../Source/lib/include/Tensile/AMDGPU.hpp     |  30 +++
 .../include/Tensile/PlaceholderLibrary.hpp    |   6 +
 .../Tensile/Serialization/Predicates.hpp      |   2 +
 .../cmake/TensileSupportedArchitectures.cmake |   2 +
 11 files changed, 320 insertions(+), 8 deletions(-)

diff --git a/projects/rocblas/CMakeLists.txt b/projects/rocblas/CMakeLists.txt
index 8fb7ceeb48..689aa1881c 100644
--- a/projects/rocblas/CMakeLists.txt
+++ b/projects/rocblas/CMakeLists.txt
@@ -80,12 +80,12 @@ list( APPEND CMAKE_PREFIX_PATH ${ROCM_PATH}/llvm ${ROCM_PATH} ${ROCM_PATH}/hip /
 
 # setting target list based on ROCm version
 if (NOT BUILD_ADDRESS_SANITIZER)
-  set( TARGET_LIST_ROCM_5.6 "gfx803;gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102")
-  set( TARGET_LIST_ROCM_5.7 "gfx803;gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx942;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102")
-  set( TARGET_LIST_ROCM_6.0 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx942;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102")
-  set( TARGET_LIST_ROCM_6.3 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a;gfx942;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102;gfx1151;gfx1200;gfx1201")
-  set( TARGET_LIST_ROCM_7.0 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a;gfx942;gfx950;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102;gfx1150;gfx1151;gfx1200;gfx1201")
-  set( TARGET_LIST_ROCM_7.1 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a;gfx942;gfx950;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102;gfx1103;gfx1150;gfx1151;gfx1200;gfx1201")
+  set( TARGET_LIST_ROCM_5.6 "gfx803;gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx1010;gfx1012;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102")
+  set( TARGET_LIST_ROCM_5.7 "gfx803;gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx942;gfx1010;gfx1012;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102")
+  set( TARGET_LIST_ROCM_6.0 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx942;gfx1010;gfx1012;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102")
+  set( TARGET_LIST_ROCM_6.3 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a;gfx942;gfx1010;gfx1012;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1151;gfx1200;gfx1201")
+  set( TARGET_LIST_ROCM_7.0 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a;gfx942;gfx950;gfx1010;gfx1012;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1150;gfx1151;gfx1200;gfx1201")
+  set( TARGET_LIST_ROCM_7.1 "gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a;gfx942;gfx950;gfx1010;gfx1012;gfx1030;gfx1031;gfx1032;gfx1033;gfx1034;gfx1035;gfx1036;gfx1100;gfx1101;gfx1102;gfx1103;gfx1150;gfx1151;gfx1200;gfx1201")
 else()
   set( TARGET_LIST_ROCM_5.6 "gfx908:xnack+;gfx90a:xnack+")
   set( TARGET_LIST_ROCM_5.7 "gfx908:xnack+;gfx90a:xnack+;gfx942:xnack+")
diff --git a/projects/rocblas/library/src/handle.cpp b/projects/rocblas/library/src/handle.cpp
index 57661135b9..296ae24fe3 100644
--- a/projects/rocblas/library/src/handle.cpp
+++ b/projects/rocblas/library/src/handle.cpp
@@ -378,6 +378,30 @@ Processor _rocblas_handle::getActiveArch()
     {
         return Processor::gfx1030;
     }
+    else if(deviceString.find("gfx1031") != std::string::npos)
+    {
+        return Processor::gfx1031;
+    }
+    else if(deviceString.find("gfx1032") != std::string::npos)
+    {
+        return Processor::gfx1032;
+    }
+    else if(deviceString.find("gfx1033") != std::string::npos)
+    {
+        return Processor::gfx1033;
+    }
+    else if(deviceString.find("gfx1034") != std::string::npos)
+    {
+        return Processor::gfx1034;
+    }
+    else if(deviceString.find("gfx1035") != std::string::npos)
+    {
+        return Processor::gfx1035;
+    }
+    else if(deviceString.find("gfx1036") != std::string::npos)
+    {
+        return Processor::gfx1036;
+    }
     else if(deviceString.find("gfx1100") != std::string::npos)
     {
         return Processor::gfx1100;
diff --git a/projects/rocblas/library/src/include/handle.hpp b/projects/rocblas/library/src/include/handle.hpp
index a0a1760be2..d0956155fe 100644
--- a/projects/rocblas/library/src/include/handle.hpp
+++ b/projects/rocblas/library/src/include/handle.hpp
@@ -90,8 +90,10 @@ enum class Processor : int
     gfx1030 = 1030,
     gfx1031 = 1031,
     gfx1032 = 1032,
+    gfx1033 = 1033,
     gfx1034 = 1034,
     gfx1035 = 1035,
+    gfx1036 = 1036,
     gfx1100 = 1100,
     gfx1101 = 1101,
     gfx1102 = 1102,
diff --git a/projects/rocblas/library/src/tensile_host.cpp b/projects/rocblas/library/src/tensile_host.cpp
index 7a40989f35..d06ed874e0 100644
--- a/projects/rocblas/library/src/tensile_host.cpp
+++ b/projects/rocblas/library/src/tensile_host.cpp
@@ -281,6 +281,30 @@ namespace
         {
             return Tensile::LazyLoadingInit::gfx1030;
         }
+        else if(deviceString.find("gfx1031") != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1031;
+        }
+        else if(deviceString.find("gfx1032") != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1032;
+        }
+        else if(deviceString.find("gfx1033") != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1033;
+        }
+        else if(deviceString.find("gfx1034") != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1034;
+        }
+        else if(deviceString.find("gfx1035") != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1035;
+        }
+        else if(deviceString.find("gfx1036") != std::string::npos)
+        {
+            return Tensile::LazyLoadingInit::gfx1036;
+        }
         else if(deviceString.find("gfx1100") != std::string::npos)
         {
             return Tensile::LazyLoadingInit::gfx1100;
diff --git a/shared/tensile/Tensile/AsmCaps.py b/shared/tensile/Tensile/AsmCaps.py
index 05df6f2309..d3d3631e23 100644
--- a/shared/tensile/Tensile/AsmCaps.py
+++ b/shared/tensile/Tensile/AsmCaps.py
@@ -609,6 +609,226 @@ def getCapabilitiesCache(rocmVersion: NamedTuple) -> dict:
                   'v_mov_b64': False,
                   'v_pk_fma_f16': True,
                   'v_pk_fmac_f16': False},
+     (10, 3, 2): {'HasAddLshl': True,
+                  'HasAtomicAdd': False,
+                  'HasDirectToLdsDest': False,
+                  'HasDirectToLdsNoDest': True,
+                  'HasExplicitCO': True,
+                  'HasExplicitNC': True,
+                  'HasGLCModifier': True,
+                  'HasNTModifier': False,
+                  'HasLshlOr': True,
+                  'HasMFMA': False,
+                  'HasMFMA_b8': False,
+                  'HasMFMA_bf16_1k': False,
+                  'HasMFMA_bf16_original': False,
+                  'HasMFMA_constSrc': False,
+                  'HasMFMA_f64': False,
+                  'HasMFMA_f8': False,
+                  'HasMFMA_i8_908': False,
+                  'HasMFMA_i8_940': False,
+                  'HasMFMA_vgpr': False,
+                  'HasMFMA_xf32': False,
+                  'HasSMulHi': True,
+                  'HasWMMA': False,
+                  'KernargPreloading': False,
+                  'MaxLgkmcnt': 15,
+                  'MaxVmcnt': 63,
+                  'SupportedISA': True,
+                  'SupportedSource': True,
+                  'VOP3v_dot4_i32_i8': True,
+                  'v_dot2_f32_f16': True,
+                  'v_dot2c_f32_f16': True,
+                  'v_dot4_i32_i8': False,
+                  'v_dot4c_i32_i8': True,
+                  'v_fma_f16': True,
+                  'v_fma_f32': True,
+                  'v_fma_f64': True,
+                  'v_fma_mix_f32': True,
+                  'v_fmac_f16': False,
+                  'v_fmac_f32': True,
+                  'v_mac_f16': False,
+                  'v_mac_f32': False,
+                  'v_mad_mix_f32': False,
+                  'v_mov_b64': False,
+                  'v_pk_fma_f16': True,
+                  'v_pk_fmac_f16': False},
+     (10, 3, 3): {'HasAddLshl': True,
+                  'HasAtomicAdd': False,
+                  'HasDirectToLdsDest': False,
+                  'HasDirectToLdsNoDest': True,
+                  'HasExplicitCO': True,
+                  'HasExplicitNC': True,
+                  'HasGLCModifier': True,
+                  'HasNTModifier': False,
+                  'HasLshlOr': True,
+                  'HasMFMA': False,
+                  'HasMFMA_b8': False,
+                  'HasMFMA_bf16_1k': False,
+                  'HasMFMA_bf16_original': False,
+                  'HasMFMA_constSrc': False,
+                  'HasMFMA_f64': False,
+                  'HasMFMA_f8': False,
+                  'HasMFMA_i8_908': False,
+                  'HasMFMA_i8_940': False,
+                  'HasMFMA_vgpr': False,
+                  'HasMFMA_xf32': False,
+                  'HasSMulHi': True,
+                  'HasWMMA': False,
+                  'KernargPreloading': False,
+                  'MaxLgkmcnt': 15,
+                  'MaxVmcnt': 63,
+                  'SupportedISA': True,
+                  'SupportedSource': True,
+                  'VOP3v_dot4_i32_i8': True,
+                  'v_dot2_f32_f16': True,
+                  'v_dot2c_f32_f16': True,
+                  'v_dot4_i32_i8': False,
+                  'v_dot4c_i32_i8': True,
+                  'v_fma_f16': True,
+                  'v_fma_f32': True,
+                  'v_fma_f64': True,
+                  'v_fma_mix_f32': True,
+                  'v_fmac_f16': False,
+                  'v_fmac_f32': True,
+                  'v_mac_f16': False,
+                  'v_mac_f32': False,
+                  'v_mad_mix_f32': False,
+                  'v_mov_b64': False,
+                  'v_pk_fma_f16': True,
+                  'v_pk_fmac_f16': False},             
+     (10, 3, 4): {'HasAddLshl': True,
+                  'HasAtomicAdd': False,
+                  'HasDirectToLdsDest': False,
+                  'HasDirectToLdsNoDest': True,
+                  'HasExplicitCO': True,
+                  'HasExplicitNC': True,
+                  'HasGLCModifier': True,
+                  'HasNTModifier': False,
+                  'HasLshlOr': True,
+                  'HasMFMA': False,
+                  'HasMFMA_b8': False,
+                  'HasMFMA_bf16_1k': False,
+                  'HasMFMA_bf16_original': False,
+                  'HasMFMA_constSrc': False,
+                  'HasMFMA_f64': False,
+                  'HasMFMA_f8': False,
+                  'HasMFMA_i8_908': False,
+                  'HasMFMA_i8_940': False,
+                  'HasMFMA_vgpr': False,
+                  'HasMFMA_xf32': False,
+                  'HasSMulHi': True,
+                  'HasWMMA': False,
+                  'KernargPreloading': False,
+                  'MaxLgkmcnt': 15,
+                  'MaxVmcnt': 63,
+                  'SupportedISA': True,
+                  'SupportedSource': True,
+                  'VOP3v_dot4_i32_i8': True,
+                  'v_dot2_f32_f16': True,
+                  'v_dot2c_f32_f16': True,
+                  'v_dot4_i32_i8': False,
+                  'v_dot4c_i32_i8': True,
+                  'v_fma_f16': True,
+                  'v_fma_f32': True,
+                  'v_fma_f64': True,
+                  'v_fma_mix_f32': True,
+                  'v_fmac_f16': False,
+                  'v_fmac_f32': True,
+                  'v_mac_f16': False,
+                  'v_mac_f32': False,
+                  'v_mad_mix_f32': False,
+                  'v_mov_b64': False,
+                  'v_pk_fma_f16': True,
+                  'v_pk_fmac_f16': False},             
+     (10, 3, 5): {'HasAddLshl': True,
+                  'HasAtomicAdd': False,
+                  'HasDirectToLdsDest': False,
+                  'HasDirectToLdsNoDest': True,
+                  'HasExplicitCO': True,
+                  'HasExplicitNC': True,
+                  'HasGLCModifier': True,
+                  'HasNTModifier': False,
+                  'HasLshlOr': True,
+                  'HasMFMA': False,
+                  'HasMFMA_b8': False,
+                  'HasMFMA_bf16_1k': False,
+                  'HasMFMA_bf16_original': False,
+                  'HasMFMA_constSrc': False,
+                  'HasMFMA_f64': False,
+                  'HasMFMA_f8': False,
+                  'HasMFMA_i8_908': False,
+                  'HasMFMA_i8_940': False,
+                  'HasMFMA_vgpr': False,
+                  'HasMFMA_xf32': False,
+                  'HasSMulHi': True,
+                  'HasWMMA': False,
+                  'KernargPreloading': False,
+                  'MaxLgkmcnt': 15,
+                  'MaxVmcnt': 63,
+                  'SupportedISA': True,
+                  'SupportedSource': True,
+                  'VOP3v_dot4_i32_i8': True,
+                  'v_dot2_f32_f16': True,
+                  'v_dot2c_f32_f16': True,
+                  'v_dot4_i32_i8': False,
+                  'v_dot4c_i32_i8': True,
+                  'v_fma_f16': True,
+                  'v_fma_f32': True,
+                  'v_fma_f64': True,
+                  'v_fma_mix_f32': True,
+                  'v_fmac_f16': False,
+                  'v_fmac_f32': True,
+                  'v_mac_f16': False,
+                  'v_mac_f32': False,
+                  'v_mad_mix_f32': False,
+                  'v_mov_b64': False,
+                  'v_pk_fma_f16': True,
+                  'v_pk_fmac_f16': False},                                       
+     (10, 3, 6): {'HasAddLshl': True,
+                  'HasAtomicAdd': False,
+                  'HasDirectToLdsDest': False,
+                  'HasDirectToLdsNoDest': True,
+                  'HasExplicitCO': True,
+                  'HasExplicitNC': True,
+                  'HasGLCModifier': True,
+                  'HasNTModifier': False,
+                  'HasLshlOr': True,
+                  'HasMFMA': False,
+                  'HasMFMA_b8': False,
+                  'HasMFMA_bf16_1k': False,
+                  'HasMFMA_bf16_original': False,
+                  'HasMFMA_constSrc': False,
+                  'HasMFMA_f64': False,
+                  'HasMFMA_f8': False,
+                  'HasMFMA_i8_908': False,
+                  'HasMFMA_i8_940': False,
+                  'HasMFMA_vgpr': False,
+                  'HasMFMA_xf32': False,
+                  'HasSMulHi': True,
+                  'HasWMMA': False,
+                  'KernargPreloading': False,
+                  'MaxLgkmcnt': 15,
+                  'MaxVmcnt': 63,
+                  'SupportedISA': True,
+                  'SupportedSource': True,
+                  'VOP3v_dot4_i32_i8': True,
+                  'v_dot2_f32_f16': True,
+                  'v_dot2c_f32_f16': True,
+                  'v_dot4_i32_i8': False,
+                  'v_dot4c_i32_i8': True,
+                  'v_fma_f16': True,
+                  'v_fma_f32': True,
+                  'v_fma_f64': True,
+                  'v_fma_mix_f32': True,
+                  'v_fmac_f16': False,
+                  'v_fmac_f32': True,
+                  'v_mac_f16': False,
+                  'v_mac_f32': False,
+                  'v_mad_mix_f32': False,
+                  'v_mov_b64': False,
+                  'v_pk_fma_f16': True,
+                  'v_pk_fmac_f16': False},             
      (11, 0, 0): {'HasAddLshl': True,
                   'HasAtomicAdd': True,
                   'HasDirectToLdsDest': False,
diff --git a/shared/tensile/Tensile/Common.py b/shared/tensile/Tensile/Common.py
index b36820e6b5..047d80de48 100644
--- a/shared/tensile/Tensile/Common.py
+++ b/shared/tensile/Tensile/Common.py
@@ -248,7 +248,7 @@ globalParameters["MaxFileName"] = 64              # If a file name would be long
 globalParameters["SupportedISA"] = [(8,0,3),
                                     (9,0,0), (9,0,6), (9,0,8), (9,0,10),
                                     (9,4,2), (9,5,0),
-                                    (10,1,0), (10,1,1), (10,1,2), (10,3,0), (10,3,1),
+                                    (10,1,0), (10,1,1), (10,1,2), (10,3,0), (10,3,1), (10,3,2), (10,3,3), (10,3,4), (10,3,5), (10,3,6),
                                     (11,0,0), (11,0,1), (11,0,2), (11,0,3),
                                     (11,5,0), (11,5,1),
                                     (12,0,0), (12,0,1)] # assembly kernels writer supports these architectures
@@ -323,7 +323,7 @@ architectureMap = {
   'gfx942':'aquavanjaram942', 'gfx942:xnack+':'aquavanjaram942', 'gfx942:xnack-':'aquavanjaram942',
   'gfx950':'gfx950', 'gfx950:xnack+':'gfx950', 'gfx950:xnack-':'gfx950',
   'gfx1010':'navi10', 'gfx1011':'navi12', 'gfx1012':'navi14',
-  'gfx1030':'navi21', 'gfx1031':'navi22', 'gfx1032':'navi23', 'gfx1034':'navi24', 'gfx1035':'rembrandt',
+  'gfx1030':'navi21', 'gfx1031':'navi22', 'gfx1032':'navi23', 'gfx1033':'van gogh', 'gfx1034':'navi24', 'gfx1035':'rembrandt', 'gfx1036':'raphael',
   'gfx1100':'navi31', 'gfx1101':'navi32', 'gfx1102':'navi33', 'gfx1103':'gfx1103',
   'gfx1150':'strixpoint', 'gfx1151':'strixhalo',
   'gfx1200':'gfx1200',
diff --git a/shared/tensile/Tensile/Source/cmake/TensileSupportedArchitectures.cmake b/shared/tensile/Tensile/Source/cmake/TensileSupportedArchitectures.cmake
index e8a28d3bfe..4684fcd3a9 100644
--- a/shared/tensile/Tensile/Source/cmake/TensileSupportedArchitectures.cmake
+++ b/shared/tensile/Tensile/Source/cmake/TensileSupportedArchitectures.cmake
@@ -43,8 +43,10 @@ if(NOT BUILD_ADDRESS_SANITIZER)
         "gfx1030"
         "gfx1031"
         "gfx1032"
+        "gfx1033"
         "gfx1034"
         "gfx1035"
+        "gfx1036"
         "gfx1100"
         "gfx1101"
         "gfx1102"
diff --git a/shared/tensile/Tensile/Source/lib/include/Tensile/AMDGPU.hpp b/shared/tensile/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
index 317250db16..0188a3c661 100644
--- a/shared/tensile/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
+++ b/shared/tensile/Tensile/Source/lib/include/Tensile/AMDGPU.hpp
@@ -68,8 +68,10 @@ namespace Tensile
             gfx1030 = 1030,
             gfx1031 = 1031,
             gfx1032 = 1032,
+            gfx1033 = 1033,
             gfx1034 = 1034,
             gfx1035 = 1035,
+            gfx1036 = 1036,
             gfx1100 = 1100,
             gfx1101 = 1101,
             gfx1102 = 1102,
@@ -110,10 +112,14 @@ namespace Tensile
                 return "gfx1031";
             case AMDGPU::Processor::gfx1032:
                 return "gfx1032";
+            case AMDGPU::Processor::gfx1033:
+                return "gfx1033";
             case AMDGPU::Processor::gfx1034:
                 return "gfx1034";
             case AMDGPU::Processor::gfx1035:
                 return "gfx1035";
+            case AMDGPU::Processor::gfx1036:
+                return "gfx1036";
             case AMDGPU::Processor::gfx1100:
                 return "gfx1100";
             case AMDGPU::Processor::gfx1101:
@@ -180,6 +186,30 @@ namespace Tensile
             {
                 return AMDGPU::Processor::gfx1030;
             }
+            else if(deviceString.find("gfx1031") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1031;
+            }
+            else if(deviceString.find("gfx1032") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1032;
+            }
+            else if(deviceString.find("gfx1033") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1033;
+            }
+            else if(deviceString.find("gfx1034") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1034;
+            }
+            else if(deviceString.find("gfx1035") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1035;
+            }
+            else if(deviceString.find("gfx1036") != std::string::npos)
+            {
+                return AMDGPU::Processor::gfx1036;
+            }
             else if(deviceString.find("gfx1100") != std::string::npos)
             {
                 return AMDGPU::Processor::gfx1100;
diff --git a/shared/tensile/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp b/shared/tensile/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
index a21e584d29..105b627c32 100644
--- a/shared/tensile/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
+++ b/shared/tensile/Tensile/Source/lib/include/Tensile/PlaceholderLibrary.hpp
@@ -52,8 +52,10 @@ namespace Tensile
         gfx1030,
         gfx1031,
         gfx1032,
+        gfx1033,
         gfx1034,
         gfx1035,
+        gfx1036,
         gfx1100,
         gfx1101,
         gfx1102,
@@ -98,10 +100,14 @@ namespace Tensile
             return "TensileLibrary_*_gfx1031";
         case LazyLoadingInit::gfx1032:
             return "TensileLibrary_*_gfx1032";
+        case LazyLoadingInit::gfx1033:
+            return "TensileLibrary_*_gfx1033";
         case LazyLoadingInit::gfx1034:
             return "TensileLibrary_*_gfx1034";
         case LazyLoadingInit::gfx1035:
             return "TensileLibrary_*_gfx1035";
+        case LazyLoadingInit::gfx1036:
+            return "TensileLibrary_*_gfx1036";    
         case LazyLoadingInit::gfx1100:
             return "TensileLibrary_*_gfx1100";
         case LazyLoadingInit::gfx1101:
diff --git a/shared/tensile/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp b/shared/tensile/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
index 361a0e1418..48afc8fb75 100644
--- a/shared/tensile/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
+++ b/shared/tensile/Tensile/Source/lib/include/Tensile/Serialization/Predicates.hpp
@@ -228,8 +228,10 @@ namespace Tensile
                 iot::enumCase(io, value, "gfx1030", AMDGPU::Processor::gfx1030);
                 iot::enumCase(io, value, "gfx1031", AMDGPU::Processor::gfx1031);
                 iot::enumCase(io, value, "gfx1032", AMDGPU::Processor::gfx1032);
+                iot::enumCase(io, value, "gfx1033", AMDGPU::Processor::gfx1033);
                 iot::enumCase(io, value, "gfx1034", AMDGPU::Processor::gfx1034);
                 iot::enumCase(io, value, "gfx1035", AMDGPU::Processor::gfx1035);
+                iot::enumCase(io, value, "gfx1036", AMDGPU::Processor::gfx1036);
                 iot::enumCase(io, value, "gfx1100", AMDGPU::Processor::gfx1100);
                 iot::enumCase(io, value, "gfx1101", AMDGPU::Processor::gfx1101);
                 iot::enumCase(io, value, "gfx1102", AMDGPU::Processor::gfx1102);
diff --git a/shared/tensile/next-cmake/cmake/TensileSupportedArchitectures.cmake b/shared/tensile/next-cmake/cmake/TensileSupportedArchitectures.cmake
index e8a28d3bfe..4684fcd3a9 100644
--- a/shared/tensile/next-cmake/cmake/TensileSupportedArchitectures.cmake
+++ b/shared/tensile/next-cmake/cmake/TensileSupportedArchitectures.cmake
@@ -43,8 +43,10 @@ if(NOT BUILD_ADDRESS_SANITIZER)
         "gfx1030"
         "gfx1031"
         "gfx1032"
+        "gfx1033"
         "gfx1034"
         "gfx1035"
+        "gfx1036"
         "gfx1100"
         "gfx1101"
         "gfx1102"
-- 
2.43.0

