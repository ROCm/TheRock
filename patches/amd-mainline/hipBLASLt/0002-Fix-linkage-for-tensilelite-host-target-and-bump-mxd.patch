From c42a527dd81f470af58e958309c7565eadfc0f38 Mon Sep 17 00:00:00 2001
From: David Dixon <david.dixon@amd.com>
Date: Wed, 16 Jul 2025 19:22:12 +0000
Subject: [PATCH] Fix linkage for tensilelite-host target and bump
 mxdatagenerator

- Updates linkage for tensilelite-host msgpack dependency because it is
  a build and usage requirement.
- Make tensilelite-host and PUBLIC dependency but only for build
  interface.
- Bumps mxdatagenerator version.

https://github.com/ROCm/rocm-libraries/pull/702
---
 clients/CMakeLists.txt        |  2 +-
 clients/common/mxDataGen.cpp  | 15 +++++++--------
 clients/include/mxDataGen.hpp |  6 +++---
 next-cmake/CMakeLists.txt     | 10 +++++-----
 next-cmake/CMakePresets.json  | 17 +++++++++++++++++
 5 files changed, 33 insertions(+), 17 deletions(-)
 create mode 100644 next-cmake/CMakePresets.json

diff --git a/clients/CMakeLists.txt b/clients/CMakeLists.txt
index 05e6c989..194f2221 100755
--- a/clients/CMakeLists.txt
+++ b/clients/CMakeLists.txt
@@ -126,7 +126,7 @@ if( BUILD_CLIENTS_BENCHMARKS OR BUILD_CLIENTS_TESTS)
       FetchContent_Declare(
         mxDataGenerator
         GIT_REPOSITORY https://github.com/ROCm/mxDataGenerator.git
-        GIT_TAG 12c016dc694139317feb2e23c59028fde70beaf4
+        GIT_TAG 3ac153eec4c1a1e0da7546abc9c0c4f54e180f43
       )
       FetchContent_MakeAvailable(mxDataGenerator)
 
diff --git a/clients/common/mxDataGen.cpp b/clients/common/mxDataGen.cpp
index f3f30ce8..414ab5e8 100644
--- a/clients/common/mxDataGen.cpp
+++ b/clients/common/mxDataGen.cpp
@@ -25,7 +25,6 @@
  *******************************************************************************/
 
 #include "mxDataGen.hpp"
-#include <DataGenerator.hpp>
 #include <cblas.h>
 
 template <typename DT>
@@ -215,8 +214,8 @@ template <typename T, typename DT>
 std::vector<float> generateData(T                           dgen,
                                 void*                       data,
                                 void*                       scale,
-                                std::vector<int>            sizes,
-                                std::vector<int>            strides,
+                                std::vector<DGen::index_t>  sizes,
+                                std::vector<DGen::index_t>  strides,
                                 uint32_t                    seed,
                                 DGen::DataGeneratorOptions& opt,
                                 int                         elementsPerMXBlock,
@@ -288,9 +287,9 @@ std::vector<float> generateData(T                           dgen,
 std::vector<float> generateMXInput(hipDataType            dataType,
                                    void*                  data,
                                    void*                  scale,
-                                   int                    rowSize,
-                                   int                    colSize,
-                                   int                    stride,
+                                   DGen::index_t          rowSize,
+                                   DGen::index_t          colSize,
+                                   DGen::index_t          stride,
                                    bool                   isTranspose,
                                    int const              scaleBlockRowSize,
                                    int const              scaleBlockColSize,
@@ -309,8 +308,8 @@ std::vector<float> generateMXInput(hipDataType            dataType,
 
     const uint32_t seed = 1713573849;
 
-    std::vector<int> sizes{rowSize, colSize};
-    std::vector<int> strides;
+    std::vector<DGen::index_t> sizes{rowSize, colSize};
+    std::vector<DGen::index_t> strides;
 
     strides.push_back(1);
     strides.push_back(stride);
diff --git a/clients/include/mxDataGen.hpp b/clients/include/mxDataGen.hpp
index 766c548d..b35c6213 100644
--- a/clients/include/mxDataGen.hpp
+++ b/clients/include/mxDataGen.hpp
@@ -33,9 +33,9 @@
 std::vector<float> generateMXInput(hipDataType            dataType,
                                    void*                  data,
                                    void*                  scale,
-                                   int                    row,
-                                   int                    col,
-                                   int                    stride,
+                                   uint64_t                row,
+                                   uint64_t                col,
+                                   uint64_t                stride,
                                    bool                   isTranspose,
                                    int const              scaleBlockRowSize,
                                    int const              scaleBlockColSize,
diff --git a/next-cmake/CMakeLists.txt b/next-cmake/CMakeLists.txt
index 6e4e15da..1ea143b5 100644
--- a/next-cmake/CMakeLists.txt
+++ b/next-cmake/CMakeLists.txt
@@ -73,7 +73,7 @@ if(HIPBLASLT_ENABLE_HOST OR TENSILELITE_ENABLE_HOST)
     set(HIPBLASLT_ENABLE_MSGPACK ON CACHE BOOL "Use msgpack for parsing configuration files.")
     set(HIPBLASLT_ENABLE_OPENMP ON CACHE BOOL "Use OpenMP to improve performance.")
     set(HIPBLASLT_ENABLE_LLVM OFF CACHE BOOL "Use msgpack for parsing configuration files.")
-    set(HIPBLASLT_ENABLE_ROCROLLER OFF CACHE BOOL "Use RocRoller library.")
+    set(HIPBLASLT_ENABLE_ROCROLLER ON CACHE BOOL "Use RocRoller library.")
     set(HIPBLASLT_ENABLE_BLIS ON CACHE BOOL "Enable BLIS support.") # I don't know that we can build with this OFF
     set(HIPBLASLT_ENABLE_LAZY_LOAD ON CACHE BOOL "Enable lazy loading of runtime code oject files to reduce ram usage.")
     cmake_dependent_option(HIPBLASLT_ENABLE_MARKER "Use the marker library." ON "NOT WIN32" OFF)
@@ -250,9 +250,9 @@ if(TENSILELITE_ENABLE_HOST OR HIPBLASLT_ENABLE_HOST)
 
     if(HIPBLASLT_ENABLE_MSGPACK)
         if(msgpack-cxx_FOUND)
-            target_link_libraries(tensilelite-host PRIVATE msgpack-cxx)
+            target_link_libraries(tensilelite-host PUBLIC msgpack-cxx)
         else()
-            target_link_libraries(tensilelite-host PRIVATE msgpackc)
+            target_link_libraries(tensilelite-host PUBLIC msgpackc)
         endif()
         target_compile_definitions(tensilelite-host PRIVATE TENSILE_MSGPACK)
     endif()
@@ -265,7 +265,7 @@ if(TENSILELITE_ENABLE_HOST OR HIPBLASLT_ENABLE_HOST)
             "${CMAKE_CURRENT_BINARY_DIR}/include"
     )
 
-    target_link_libraries(tensilelite-host 
+    target_link_libraries(tensilelite-host
         PUBLIC
             rocisa::rocisa-cpp
             hip::device
@@ -292,8 +292,8 @@ if(HIPBLASLT_ENABLE_HOST)
         PUBLIC
             roc::${hipblas_target}
             hip::device
+            $<BUILD_INTERFACE:tensilelite::tensilelite-host>
         PRIVATE
-            tensilelite-host
             ${CMAKE_DL_LIBS}
             ${rocTracer}
     )
diff --git a/next-cmake/CMakePresets.json b/next-cmake/CMakePresets.json
new file mode 100644
index 00000000..9a8dcdec
--- /dev/null
+++ b/next-cmake/CMakePresets.json
@@ -0,0 +1,17 @@
+{
+    "version": 3,
+    "configurePresets": [
+      {
+        "name": "opt-rocm",
+        "displayName": "/opt/rocm Config",
+        "description": "Sets compiler and prefix path for /opt/rocm install",
+        "cacheVariables": {
+          "CMAKE_CXX_COMPILER": "/opt/rocm/bin/amdclang++",
+          "CMAKE_C_COMPILER": "/opt/rocm/bin/amdclang",
+          "CMAKE_PREFIX_PATH": "/opt/rocm",
+          "CMAKE_BUILD_TYPE": "Release",
+          "HIPBLASLT_ENABLE_DEVICE": "OFF"
+        }
+      }
+  ]
+}
-- 
2.43.0

