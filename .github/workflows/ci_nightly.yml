# This CI workflow is triggered by:
#   - scheduled run
#
# In the scheduled run, we run all targets from amdgpu_family_matrix.py and amdgpu_family_matrix_xfail.py
# As some of these builds are xfail, we allow errors to occur with `continue-on-error`, where the job will fail but the workflow is green

name: CI Nightly

on:
  # For AMD GPU families that expect_failure, we run builds and tests from this scheduled trigger
  schedule:
    - cron: "0 2 * * *" # Runs nightly at 2 AM UTC
  workflow_dispatch:
    inputs:
      linux_amdgpu_families:
        type: string
        description: "Insert comma-separated list of Linux GPU families to build and test. ex: gfx94X, gfx1201X"
        default: ""
      linux_test_labels:
        type: string
        description: "If enabled, reduce test set on Linux to the list of labels prefixed with 'test:'"
        default: ""
      linux_use_prebuilt_artifacts:
        type: boolean
        description: "If enabled, the CI will pull Linux artifacts using artifact_run_id and only run tests"
      windows_amdgpu_families:
        type: string
        description: "Insert comma-separated list of Windows GPU families to build and test. ex: gfx94X, gfx1201X"
        default: ""
      windows_test_labels:
        type: string
        description: "If enabled, reduce test set on Windows to the list of labels prefixed with 'test:'"
        default: ""
      windows_use_prebuilt_artifacts:
        type: boolean
        description: "If enabled, the CI will pull Windows artifacts using artifact_run_id and only run tests"
      artifact_run_id:
        type: string
        description: "If provided, the tests will run on this artifact ID"
        default: ""

permissions:
  contents: read

concurrency:
  # A PR number if a pull request and otherwise the commit hash. This cancels
  # queued and in-progress runs for the same PR (presubmit) or commit
  # (postsubmit). The workflow name is prepended to avoid conflicts between
  # different workflows.
  group: ${{ github.workflow }}-${{ github.event.number || github.sha }}
  cancel-in-progress: true

jobs:
  setup:
    uses: ./.github/workflows/setup.yml

  linux_build_and_test:
    name: Linux::${{ matrix.variant.family }}::${{ matrix.variant.build_variant_label }}
    needs: setup
    if: >-
      ${{
        needs.setup.outputs.linux_variants != '[]' &&
        needs.setup.outputs.enable_build_jobs == 'true'
      }}
    strategy:
      fail-fast: false
      matrix:
        variant: ${{ fromJSON(needs.setup.outputs.linux_variants) }}
    uses: ./.github/workflows/ci_linux.yml
    secrets: inherit
    with:
      amdgpu_families: ${{ matrix.variant.family }}
      artifact_group: ${{ matrix.variant.artifact_group }}
      test_runs_on: ${{ matrix.variant.test-runs-on }}
      build_variant_label: ${{ matrix.variant.build_variant_label }}
      build_variant_suffix: ${{ matrix.variant.build_variant_suffix }}
      build_variant_cmake_preset: ${{ matrix.variant.build_variant_cmake_preset }}
      test_labels: ${{ needs.setup.outputs.linux_test_labels }}
      artifact_run_id: ${{ inputs.artifact_run_id }}
      expect_failure: ${{ matrix.variant.expect_failure == true }}
      use_prebuilt_artifacts: ${{ inputs.linux_use_prebuilt_artifacts == true && 'true' || 'false' }}
      rocm_package_version: ${{ needs.setup.outputs.rocm_package_version }}
      test_type: ${{ needs.setup.outputs.test_type }}
      sanity_check_only_for_family: ${{ matrix.variant.sanity_check_only_for_family == true }}
    permissions:
      contents: read
      id-token: write

  windows_build_and_test:
    name: Windows::${{ matrix.variant.family }}::${{ matrix.variant.build_variant_label }}
    needs: setup
    if: >-
      ${{
        needs.setup.outputs.windows_variants != '[]' &&
        needs.setup.outputs.enable_build_jobs == 'true'
      }}
    strategy:
      fail-fast: false
      matrix:
        variant: ${{ fromJSON(needs.setup.outputs.windows_variants) }}
    uses: ./.github/workflows/ci_windows.yml
    with:
      amdgpu_families: ${{ matrix.variant.family }}
      artifact_group: ${{ matrix.variant.artifact_group }}
      test_runs_on: ${{ matrix.variant.test-runs-on }}
      build_variant_label: ${{ matrix.variant.build_variant_label }}
      build_variant_suffix: ${{ matrix.variant.build_variant_suffix }}
      build_variant_cmake_preset: ${{ matrix.variant.build_variant_cmake_preset }}
      test_labels: ${{ needs.setup.outputs.windows_test_labels }}
      artifact_run_id: ${{ inputs.artifact_run_id }}
      expect_failure: ${{ matrix.variant.expect_failure == true }}
      use_prebuilt_artifacts: ${{ inputs.windows_use_prebuilt_artifacts == true && 'true' || 'false' }}
      rocm_package_version: ${{ needs.setup.outputs.rocm_package_version }}
      test_type: ${{ needs.setup.outputs.test_type }}
      sanity_check_only_for_family: ${{ matrix.variant.sanity_check_only_for_family == true }}
    permissions:
      contents: read
      id-token: write

  # build_python_packages:
  #   name: Build Python Packages
  #   uses: ./.github/workflows/build_python_packages.yml

  aggregate_and_send_to_loki:
    name: Aggregate All Logs and Push to Loki
    runs-on: ubuntu-latest
    if: always()
    needs: [linux_build_and_test, windows_build_and_test]

    steps:
      - name: Download all artifacts from Linux and Windows jobs
        uses: actions/download-artifact@v4
        with:
          path: ./aggregated_logs

      - name: List downloaded artifacts
        run: ls -R ./aggregated_logs || true

      - name: Aggregate all logs and JSONs into one JSON file
        shell: bash
        run: |
          mkdir -p aggregated_logs
          OUTPUT_JSON="aggregated_logs/ci_nightly_summary.json"
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')

          # Prepare JSON array structure
          echo "{" > "$OUTPUT_JSON"
          echo "  \"metadata\": {" >> "$OUTPUT_JSON"
          echo "    \"workflow\": \"${{ github.workflow }}\"," >> "$OUTPUT_JSON"
          echo "    \"repo\": \"${{ github.repository }}\"," >> "$OUTPUT_JSON"
          echo "    \"run_id\": \"${{ github.run_id }}\"," >> "$OUTPUT_JSON"
          echo "    \"run_number\": \"${{ github.run_number }}\"," >> "$OUTPUT_JSON"
          echo "    \"timestamp\": \"$TIMESTAMP\"" >> "$OUTPUT_JSON"
          echo "  }," >> "$OUTPUT_JSON"
          echo "  \"artifacts\": [" >> "$OUTPUT_JSON"

          first=true
          for file in $(find aggregated_logs -type f \( -name "*.json" -o -name "*.log" \)); do
            if [ "$first" = true ]; then
              first=false
            else
              echo "," >> "$OUTPUT_JSON"
            fi
            FILENAME=$(basename "$file")
            FILETYPE="${FILENAME##*.}"

            if [ "$FILETYPE" = "json" ]; then
              CONTENT=$(cat "$file" | jq -c . 2>/dev/null || jq -Rs . < "$file")
            else
              CONTENT=$(jq -Rs . < "$file")
            fi

            jq -n --arg name "$FILENAME" --arg type "$FILETYPE" --argjson content "$CONTENT" \
              '{file_name: $name, file_type: $type, content: $content}' >> temp_entry.json
            cat temp_entry.json >> "$OUTPUT_JSON"
            rm -f temp_entry.json
          done

          echo "]" >> "$OUTPUT_JSON"
          echo "}" >> "$OUTPUT_JSON"

          echo " Aggregated summary written to $OUTPUT_JSON"
          jq '.' "$OUTPUT_JSON" | head -n 30

      - name: Upload aggregated summary as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-nightly-summary-json
          path: aggregated_logs/ci_nightly_summary.json
          if-no-files-found: error

      - name: Send aggregated JSON summary to Loki
        env:
          LOKI_URL: ${{ secrets.LOKI_URL }}
          LOKI_USER: ${{ secrets.LOKI_USER }}
          LOKI_PASS: ${{ secrets.LOKI_PASS }}
        shell: bash
        run: |
          SUMMARY_FILE="aggregated_logs/ci_nightly_summary.json"
          echo "Pushing CI Nightly JSON summary to Loki..."
          TIMESTAMP=$(date +%s%N)
          CONTENT=$(cat "$SUMMARY_FILE" | jq -Rs .)

          curl -s -u "$LOKI_USER:$LOKI_PASS" -X POST -H "Content-Type: application/json" \
            -d "{
              \"streams\": [
                {
                  \"stream\": {
                    \"job\": \"ci_nightly\",
                    \"repo\": \"${{ github.repository }}\",
                    \"workflow\": \"${{ github.workflow }}\",
                    \"run_id\": \"${{ github.run_id }}\"
                  },
                  \"values\": [[\"$TIMESTAMP\", $CONTENT]]
                }
              ]
            }" \
            \"$LOKI_URL/api/prom/push\" > /dev/null
          echo " Successfully pushed aggregated summary to Loki"
