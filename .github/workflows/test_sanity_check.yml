name: TheRock Sanity Check

on:
  workflow_dispatch:
    inputs:
      artifact_run_id:
        type: string
        default: ""
      amdgpu_families:
        type: string
        default: ""
      test_runs_on:
        type: string
      platform:
        type: string
  workflow_call:
    inputs:
      artifact_run_id:
        type: string
        default: ""
      amdgpu_families:
        type: string
        default: ""
      test_runs_on:
        type: string
      platform:
        type: string
  push:
    branches:
      - ADHOCBUILD

permissions:
  contents: read
  id-token: write

jobs:
  test_sanity_check:
    name: "Sanity ROCM Test"
    runs-on: ${{ inputs.test_runs_on }}
    defaults:
      run:
        shell: bash
    env:
      ARTIFACT_RUN_ID: "${{ inputs.artifact_run_id != '' && inputs.artifact_run_id || github.run_id }}"
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
    steps:
      # First, checkout the repository on the host to get the test files
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: "ROCm/TheRock"
      
      # Configure AWS credentials on the host
      - name: Configure AWS Credentials on Host
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-tests
      
      - name: Setup AWS credentials file for container
        run: |
          # Create a directory for AWS credentials
          sudo mkdir -p /tmp/aws-creds
          
          # Write credentials to a file
          echo "[default]" | sudo tee /tmp/aws-creds/credentials
          echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" | sudo tee -a /tmp/aws-creds/credentials
          echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" | sudo tee -a /tmp/aws-creds/credentials
          echo "aws_session_token=$AWS_SESSION_TOKEN" | sudo tee -a /tmp/aws-creds/credentials
          echo "region=us-east-2" | sudo tee -a /tmp/aws-creds/credentials
          
          # Also create config file
          echo "[default]" | sudo tee /tmp/aws-creds/config
          echo "region=us-east-2" | sudo tee -a /tmp/aws-creds/config
          
          # Set permissions
          sudo chmod 644 /tmp/aws-creds/credentials
          sudo chmod 644 /tmp/aws-creds/config
      
      # Now run the container with all test steps
      - name: Run Tests in Container
        uses: docker://ghcr.io/rocm/no_rocm_image_ubuntu24_04@sha256:405945a40deaff9db90b9839c0f41d4cba4a383c1a7459b28627047bf6302a26
        with:
          options: --ipc host
            --group-add video
            --device /dev/kfd
            --device /dev/dri
            --group-add 992
            --env-file /etc/podinfo/gha-gpu-isolation-settings
            -v /tmp/aws-creds:/root/.aws:ro
            -v ${{ github.workspace }}:/workspace
            --workdir /workspace
          args: |
            bash -c "
            set -e
            
            # Export environment variables
            export AWS_SHARED_CREDENTIALS_FILE=/root/.aws/credentials
            export VENV_DIR=/workspace/.venv
            export OUTPUT_ARTIFACTS_DIR=/workspace/build
            export THEROCK_BIN_DIR=/workspace/build/bin
            export ARTIFACT_RUN_ID='${{ env.ARTIFACT_RUN_ID }}'
            export AMDGPU_FAMILIES='${{ env.AMDGPU_FAMILIES }}'
            
            # Verify AWS credentials
            echo 'Testing AWS credentials...'
            aws sts get-caller-identity || { echo 'Failed to get AWS identity'; exit 1; }
            
            # Setup Python virtual environment
            echo 'Setting up Python environment...'
            python3 -m venv \$VENV_DIR
            source \$VENV_DIR/bin/activate
            
            # Install Python packages
            pip install --upgrade pip
            pip install -r build_tools/requirements.txt
            
            # Run setup test environment
            echo 'Setting up test environment...'
            python3 build_tools/setup_test_environment.py \
              --artifact-run-id \$ARTIFACT_RUN_ID \
              --amdgpu-families \$AMDGPU_FAMILIES \
              --output-artifacts-dir \$OUTPUT_ARTIFACTS_DIR \
              --fetch-artifact-args '--base-only'
            
            # Install test dependencies
            echo 'Installing test dependencies...'
            pip install -r tests/sharding/requirements.txt
            
            # Run ROCm Sanity Tests
            echo 'Running ROCm Sanity Tests...'
            export AMD_LOG_LEVEL=4
            pytest tests/ --log-cli-level=info --timeout=60 -v || true
            
            # Run Sharded Tests
            echo 'Running Sharded Tests...'
            cd tests/sharding
            pytest -v -s --tb=short tests.py --rock=\$OUTPUT_ARTIFACTS_DIR -k rocminfo --timeout=300 || true
            "
