name: Test component sharded

on:
  workflow_call:
    inputs:
      artifact_run_id:
        type: string
        default: ""
      amdgpu_families:
        type: string
      test_runs_on:
        type: string
      platform:
        type: string
      component:
        type: string
        default: "rocinfo"
      AWS_ACCESS_KEY_ID:
        type: string
      AWS_SECRET_ACCESS_KEY:
        type: string
      AWS_SESSION_TOKEN:
        type: string
      AWS_DEFAULT_REGION:
        type: string

permissions:
  contents: read

jobs:
  test_component:
    name: 'Test ${{ fromJSON(inputs.component).job_name }} (shard ${{ matrix.shard }} of ${{ fromJSON(inputs.component).total_shards }})'
    runs-on: ${{ inputs.test_runs_on }}
    container:
      image: ${{ inputs.platform == 'linux' && 'ghcr.io/rocm/no_rocm_image_ubuntu24_04@sha256:4150afe4759d14822f0e3f8930e1124f26e11f68b5c7b91ec9a02b20b1ebbb98' || null }}
      options: --ipc host
        --group-add video
        --device /dev/kfd
        --device /dev/dri
        --group-add 992
        --env-file /etc/podinfo/gha-gpu-isolation-settings
        -v /runner/config:/home/awsconfig/
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     # The shard array is based on "total_shards" from "fetch_test_configurations.py"
    #     # The test executable will shard based on the array. (ex: [1, 2, 3, 4] = four test shards)
    #     shard: ${{ fromJSON(inputs.component).shard_arr }}
    defaults:
      run:
        shell: bash
    env:
      VENV_DIR: ${{ github.workspace }}/.venv
      ARTIFACT_RUN_ID: "${{ inputs.artifact_run_id != '' && inputs.artifact_run_id || github.run_id }}"
      OUTPUT_ARTIFACTS_DIR: "./build"
      THEROCK_BIN_DIR: "./build/bin"
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
      AWS_SHARED_CREDENTIALS_FILE: /home/awsconfig/credentials.ini

      # Add AWS credentials from secrets to environment
    steps:

      - name: Configure AWS Credentials - Tests
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-tests

      - name: "Fetch 'build_tools' from repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          sparse-checkout: build_tools
          path: "prejob"

      - name: Pre-job cleanup processes on Windows
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: . '${{ github.workspace }}\prejob\build_tools\github_actions\cleanup_processes.ps1'

      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: "ROCm/TheRock"

      - name: Run setup test environment workflow
        uses: './.github/actions/setup_test_environment'
        with:
          ARTIFACT_RUN_ID: ${{ env.ARTIFACT_RUN_ID }}
          AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
          OUTPUT_ARTIFACTS_DIR: ${{ env.OUTPUT_ARTIFACTS_DIR }}
          VENV_DIR: ${{ env.VENV_DIR }}
          FETCH_ARTIFACT_ARGS: ${{ fromJSON(inputs.component).fetch_artifact_args }}
          IS_PR_FROM_FORK: ${{ github.event.pull_request.head.repo.fork }}

      - name: Sharded Tests
        env:
          OUTPUT_ARTIFACTS_DIR: ${{ env.OUTPUT_ARTIFACTS_DIR }}
        run: |
          cd tests/sharding && \
          python3 -m venv .venv && source .venv/bin/activate
          pip install -r requirements.txt
          pytest -v -s --tb=short tests.py --rock=${OUTPUT_ARTIFACTS_DIR} -k rocminfo;

      # - name: Test
      #   timeout-minutes: ${{ fromJSON(inputs.component).timeout_minutes }}
      #   env:
      #     SHARD_INDEX: ${{ matrix.shard }}
      #     TOTAL_SHARDS: ${{ fromJSON(inputs.component).total_shards }}
      #   run: |
      #     ${{ fromJSON(inputs.component).test_script }}

      # GitHub's 'Complete job' step is unaware of launched executables
      # and will fail to clean up orphan processes.
      - name: Post-job cleanup processes on Windows
        if: ${{ always() && runner.os == 'Windows' }}
        shell: powershell
        run: . '${{ github.workspace }}\build_tools\github_actions\cleanup_processes.ps1'
