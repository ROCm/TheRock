name: Publish PyTorch Dev Dockers

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * *" # Runs Nightly at 2 AM UTC

jobs:
  build-and-push-image:
    strategy:
      fail-fast: false
      matrix:
        targets:
          - amdgpu_target: "gfx942"
          - amdgpu_target: "gfx1100"
          - amdgpu_target: "gfx1201"

    name: ${{ matrix.targets.amdgpu_target }}::Build
    runs-on: azure-linux-scale-rocm
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ROCm/therock_pytorch_dev_ubuntu_24_04_${{ matrix.targets.amdgpu_target }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      actions: write # Added permission to trigger workflows

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Runner Health Settings
        run: |
          df -h
          echo "python: $(which python), python3: $(which python3)"
          echo "Git version: $(git --version)"
          git config --global --add safe.directory $PWD
          git config fetch.parallel 10
          git config --global user.email "nobody@amd.com"
          git config --global user.name "Nobody"

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y uuid-runtime gh

      - name: Generate unique dispatch ID
        id: uuid
        run: echo "DISPATCH_ID=dispatch-${{ matrix.targets.amdgpu_target }}-$(uuidgen)" >> $GITHUB_ENV

      - name: Capture dispatch start timestamp
        run: echo "START_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV

      - name: Fetch sources
        run: |
          python3 ./build_tools/fetch_sources.py --jobs 10

      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set nightly version
        run: |
          BASE_VERSION=$(jq -r '.["rocm-version"]' version.json)
          echo "VERSION=${BASE_VERSION}rc$(date +'%Y%m%d')" >> "$GITHUB_ENV"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.9
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.

      - name: Build and push Docker image
        id: build_push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: dockerfiles/pytorch-dev/pytorch_dev_ubuntu_24.04.Dockerfile
          build-args: |
            AMDGPU_TARGETS=${{ matrix.targets.amdgpu_target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=PyTorch ROCm Dev Image
            org.opencontainers.image.description=Nightly ROCm PyTorch Dev Docker for target ${{ matrix.targets.amdgpu_target }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Log digest
        run: |
          echo "Built image with digest: ${{ steps.build_push.outputs.digest }}"

      - name: Trigger verification workflow
        uses: benc-uk/workflow-dispatch@e2e5e9a103e331dad343f381a29e654aea3cf8fc
        with:
          workflow: verify_docker_image.yml
          token: ${{ github.token }}
          inputs: |
            {
              "amdgpu_target": "${{ matrix.targets.amdgpu_target }}",
              "image_digest": "${{ steps.build_push.outputs.digest }}",
              "runner_type": "${{
                matrix.targets.amdgpu_target == 'gfx942' && 'linux-mi300-1gpu-ossci-rocm' ||
                (matrix.targets.amdgpu_target == 'gfx1201' && 'linux-rx9070-gpu-rocm') ||
                'linux-mi300-1gpu-ossci-rocm'
              }}",
              "dispatch_id": "${{ env.DISPATCH_ID }}"
            }

      - name: Wait for verification to complete
        run: |
          chmod +x external-builds/pytorch/wait_for_verification.sh
          external-builds/pytorch/wait_for_verification.sh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISPATCH_ID: ${{ env.DISPATCH_ID }}
          START_TIME: ${{ env.START_TIME }}
          GITHUB_REPOSITORY: ${{ github.repository }}

      # Tag and push verified image
      - name: Tag and push verified image
        run: |
          IMAGE=ghcr.io/rocm/therock_pytorch_dev_ubuntu_24_04_${{ matrix.targets.amdgpu_target }}
          DIGEST=${{ steps.build_push.outputs.digest }}
          VERSION=${{ env.VERSION }}

          echo "Using image: $IMAGE"
          echo "Using digest: $DIGEST"
          echo "Using version: $VERSION"

          docker pull $IMAGE@$DIGEST
          docker tag $IMAGE@$DIGEST $IMAGE:$VERSION
          docker push $IMAGE:$VERSION
