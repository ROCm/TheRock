name: Test Artifacts

on:
  workflow_dispatch:
    inputs:
      artifact_group:
        type: string
      artifact_run_id:
        type: string
        default: ""
      amdgpu_families:
        type: string
      test_runs_on:
        type: string
      sanity_check_only_for_family:
        type: boolean
        default: false
      test_type:
        type: string
      test_labels:
        type: string
  workflow_call:
    inputs:
      artifact_group:
        type: string
      artifact_run_id:
        type: string
        default: ""
      amdgpu_families:
        type: string
      test_runs_on:
        type: string
      sanity_check_only_for_family:
        type: boolean
        default: false
      test_type:
        type: string
      test_labels:
        type: string
  push:
    branches:
      - ADHOCBUILD

permissions:
  contents: read

jobs:
  configure_test_matrix:
    name: "Configure test matrix"
    # if there is a test machine available
    if: ${{ inputs.test_runs_on != '' }}
    runs-on: ${{ inputs.test_runs_on }}
    outputs:
      components: ${{ steps.configure.outputs.components }}
      platform: ${{ steps.configure.outputs.platform }}
      shard_arr: ${{ steps.configure.outputs.shard_arr }}
    steps:
      - name: "Fetch 'build_tools' from repository"
        if: ${{ runner.os == 'Windows' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          sparse-checkout: build_tools
          path: "prejob"

      # Checkout failure is possible on Windows, as it's the first job on a GPU test runner.
      # Post-job cleanup isn't necessary since no executables are launched in this job.
      - name: Pre-job cleanup processes on Windows
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: . '${{ github.workspace }}\prejob\build_tools\github_actions\cleanup_processes.ps1'

      - name: "Checking out repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setting up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: 3.12

      - name: "Configuring CI options"
        id: configure
        env:
          ARTIFACT_GROUP: ${{ inputs.artifact_group }}
          AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
          TEST_TYPE: ${{ inputs.test_type }}
          TEST_LABELS: ${{ inputs.test_labels }}
        run: python ./build_tools/github_actions/fetch_test_configurations.py

  test_sanity_check:
    name: 'Test Sanity Check'
    needs: configure_test_matrix
    uses: './.github/workflows/test_sanity_check.yml'
    with:
      artifact_group: ${{ inputs.artifact_group }}
      artifact_run_id: ${{ inputs.artifact_run_id }}
      amdgpu_families: ${{ inputs.amdgpu_families }}
      test_runs_on: ${{ inputs.test_runs_on }}
      platform: ${{ needs.configure_test_matrix.outputs.platform }}

  test_components:
    name: 'Test ${{ matrix.components.job_name }}'
    needs: [test_sanity_check, configure_test_matrix]
    # skip tests if no test matrix to run and sanity check only requested
    if: ${{ needs.configure_test_matrix.outputs.components != '[]' && !inputs.sanity_check_only_for_family }}
    strategy:
      fail-fast: false
      matrix:
        components: ${{ fromJSON(needs.configure_test_matrix.outputs.components) }}
    uses: './.github/workflows/test_component.yml'
    with:
      artifact_run_id: ${{ inputs.artifact_run_id }}
      artifact_group: ${{ inputs.artifact_group }}
      amdgpu_families: ${{ inputs.amdgpu_families }}
      test_runs_on: ${{ inputs.test_runs_on }}
      platform: ${{ needs.configure_test_matrix.outputs.platform }}
      component: ${{ toJSON(matrix.components) }}

  upload_test_status:
    name: "Upload test job status summary (JSON)"
    if: always()
    runs-on: ubuntu-latest
    needs: [test_sanity_check, test_components]

    steps:
      - name: Generate job status summary (JSON)
        shell: bash
        run: |
          mkdir -p logs
          HOSTNAME=$(hostname)

          # Map job results to pass/fail booleans
          sanity_status="${{ needs.test_sanity_check.result }}"
          component_status="${{ needs.test_components.result }}"

          if [ "$sanity_status" = "success" ]; then
            sanity_passed=true
          else
            sanity_passed=false
          fi

          if [ "$component_status" = "success" ]; then
            component_passed=true
          else
            component_passed=false
          fi

          # Generate JSON summary
          jq -n \
            --arg workflow "${{ github.workflow }}" \
            --arg run_id "${{ github.run_id }}" \
            --arg run_number "${{ github.run_number }}" \
            --arg commit "${{ github.sha }}" \
            --arg repo "${{ github.repository }}" \
            --arg timestamp "$(date -u '+%Y-%m-%dT%H:%M:%SZ')" \
            --arg hostname "$HOSTNAME" \
            --arg test_sanity_check "$sanity_status" \
            --arg test_components "$component_status" \
            --argjson sanity_passed "$sanity_passed" \
            --argjson component_passed "$component_passed" \
            '{
              workflow: $workflow,
              run_id: $run_id,
              run_number: $run_number,
              commit: $commit,
              repo: $repo,
              timestamp: $timestamp,
              hostname: $hostname,
              job_results: {
                test_sanity_check: $test_sanity_check,
                test_components: $test_components
              },
              summary: {
                sanity_passed: $sanity_passed,
                component_passed: $component_passed
              }
            }' > logs/job_status_summary_${HOSTNAME}.json

          echo " JSON job summary written to logs/job_status_summary_${HOSTNAME}.json"

      - name: Upload job status summary
        uses: actions/upload-artifact@v4
        with:
          name: "test-job-logs-${{ runner.name || env.HOSTNAME }}"
          path: "logs/job_status_summary_*.json"
          if-no-files-found: warn
