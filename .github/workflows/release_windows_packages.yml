name: Release Windows packages

on:
  # Trigger from another workflow (typically to build dev packages and then test them)
  workflow_call:
    inputs:
      build_type:
        description: The type of build version to produce ("rc", or "dev")
        type: string
        default: "dev"
      package_suffix:
        type: string
  # Trigger manually (typically to test the workflow or manually build a release [candidate])
  workflow_dispatch:
    inputs:
      build_type:
        description: The type of build version to produce ("rc", or "dev")
        type: string
        default: "rc"
      package_suffix:
        type: string
      families:
        description: "Please enter a comma separated list of AMD GPU family (ex: gfx94X, gfx103x)"
        type: string

  # TODO(#542): Enable schedule once working
  # # Trigger on a schedule to build nightly release candidates.
  # schedule:
  #   # Runs at 11:00 AM UTC, which is 3:00 AM PST (UTC-8)
  #   - cron: '0 11 * * *'

permissions:
  contents: read

jobs:
  setup_metadata:
    if: ${{ github.repository_owner == 'ROCm' || github.event_name != 'schedule' }}
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.release_information.outputs.version }}
      release_type: ${{ steps.release_information.outputs.type }}
      package_targets: ${{ steps.configure.outputs.package_targets }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Python
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: 3.12

      # Compute version suffix based on inputs (default to 'rc')
      - name: Set variables for nightly release
        if: ${{ inputs.build_type == 'rc' || inputs.build_type == '' }}
        run: |
          version_suffix="$(printf 'rc%(%Y%m%d)T')"
          echo "version_suffix=${version_suffix}" >> $GITHUB_ENV
          echo "release_type=nightly" >> $GITHUB_ENV

      - name: Set variables for development release
        if: ${{ inputs.build_type == 'dev' }}
        run: |
          version_suffix=".dev0+${{ github.sha }}"
          echo "version_suffix=${version_suffix}" >> $GITHUB_ENV
          echo "release_type=dev" >> $GITHUB_ENV

      - name: Generate release information
        id: release_information
        run: |
          base_version=$(jq -r '.["rocm-version"]' version.json)
          echo "version=${base_version}${version_suffix}" >> $GITHUB_OUTPUT
          echo "type=${release_type}" >> $GITHUB_OUTPUT

      - name: Generating package target matrix
        id: configure
        env:
          AMDGPU_FAMILIES: ${{ inputs.families }}
          PYTORCH_DEV_DOCKER: "false"
          THEROCK_PACKAGE_PLATFORM: "windows"
        run: python ./build_tools/github_actions/fetch_package_targets.py

  windows_packages:
    name: ${{ matrix.target_bundle.amdgpu_family }}::Build Windows
    runs-on: ${{ github.repository_owner == 'ROCm' && 'azure-windows-scale-rocm' || 'windows-2022' }}
    needs: [setup_metadata]
    permissions:
      contents: write
      actions: write # Added permission to trigger workflows
      id-token: write # Added permission for AWS S3 upload
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        target_bundle: ${{ fromJSON(needs.setup_metadata.outputs.package_targets) }}
    env:
      TEATIME_LABEL_GH_GROUP: 1
      # TODO(scotttodd): ${OUTPUT_DIR}/${FILE_NAME} for DIST_ARCHIVE
      OUTPUT_DIR: ${{ github.workspace }}/output
      DIST_ARCHIVE: "${{ github.workspace }}/output/therock-dist-windows-${{ matrix.target_bundle.amdgpu_family }}${{ inputs.package_suffix }}-${{ needs.setup_metadata.outputs.version }}.tar.gz"
      FILE_NAME: "therock-dist-windows-${{ matrix.target_bundle.amdgpu_family }}${{ inputs.package_suffix }}-${{ needs.setup_metadata.outputs.version }}.tar.gz"
      RELEASE_TYPE: "${{ needs.setup_metadata.outputs.release_type }}"
      S3_TARBALL: "therock-${{ needs.setup_metadata.outputs.release_type }}-tarball"

    steps:
      - name: "Checking out repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: '3.12'

      - name: Print status
        run: |
          echo "DIST_ARCHIVE: ${DIST_ARCHIVE}"
          echo "RELEASE_TYPE: ${RELEASE_TYPE}"
          echo "S3_TARBALL: ${S3_TARBALL}"

      # TODO(#542): Build and upload tarballs
      # TODO(#703): Build and upload Python wheels
