name: Build Windows Artifacts

on:
  workflow_dispatch:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
        default: gfx1151
      expect_failure:
        type: boolean
      extra_cmake_options:
        type: string

  workflow_call:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
      expect_failure:
        type: boolean
      extra_cmake_options:
        type: string

permissions:
  contents: read

jobs:
  build_windows_artifacts:
    name: Build Artifacts (xfail ${{ inputs.expect_failure }})
    runs-on: azure-windows-scale-rocm
    continue-on-error: ${{ inputs.expect_failure }}
    permissions:
      id-token: write
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
    env:
      BUILD_DIR: B:\build
      CACHE_DIR: "${{github.workspace}}/.cache"
      CCACHE_DIR: "${{github.workspace}}/.cache/ccache"
      CCACHE_MAXSIZE: "4000M"
      TEATIME_FORCE_INTERACTIVE: 0
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
      IS_PR_FROM_FORK: ${{ github.event.pull_request.head.repo.fork }}
    steps:
      - name: "Checking out repository"
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: 3.12

      - name: Install python deps
        run: |
          pip install -r requirements.txt

      - name: Install requirements
        # The first two lines removes the default commmunity feed and uses the internal proxy feed
        run: |
          choco source disable -n=chocolatey
          choco source add -n=internal -s http://10.0.167.96:8081/repository/choco-group/ --priority=1
          choco install --no-progress -y ccache
          # ninja pinned due to a bug in the 1.13.0 release:
          # https://github.com/ninja-build/ninja/issues/2616
          choco install --no-progress -y ninja --version 1.12.1
          choco install --no-progress -y strawberryperl
          echo "$PATH;C:\Strawberry\c\bin" >> $GITHUB_PATH
          choco install --no-progress -y awscli
          echo "$PATH;C:\Program Files\Amazon\AWSCLIV2" >> $GITHUB_PATH

      - uses: iterative/setup-dvc@4bdfd2b0f6f1ad7e08afadb03b1a895c352a5239 # v2.0.0
        with:
          version: '3.62.0'

      # After other installs, so MSVC get priority in the PATH.
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

      - name: Runner health status
        run: |
          ccache --zero-stats
          python ./build_tools/health_status.py

      - name: Test build_tools
        run: |
          python -m pytest build_tools/tests build_tools/github_actions/tests

      # TODO: We shouldn't be using a cache on actual release branches, but it
      # really helps for iteration time.
      - name: Enable cache
        uses: actions/cache/restore@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-build-packages-v4-${{ inputs.amdgpu_families }}-${{ github.sha }}
          restore-keys: |
            windows-build-packages-v4-${{ inputs.amdgpu_families }}-

      - name: Fetch sources
        timeout-minutes: 30
        run: |
          git config fetch.parallel 10
          git config --global core.symlinks true
          git config --global core.longpaths true
          python ./build_tools/fetch_sources.py --jobs 12

      - name: Dump env (Debug)
        shell: powershell
        run: |
          Get-ChildItem Env: | Sort-Object Name

      - name: Print raw git data
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          function Run {
            param([string]$Cmd)
            Write-Host "+ $Cmd"
            # Invoke via cmd to run the exact string (supports args/flags as written)
            cmd /c $Cmd
            if ($LASTEXITCODE -ne 0) { throw "Command failed: $Cmd (exit $LASTEXITCODE)" }
            ""
          }

          Run "git config --get remote.origin.url"
          Run "git rev-parse HEAD"
          Run "git rev-parse --short HEAD"
          Run "git describe --always --tags --dirty"

          Run "git status --porcelain"

          # Show .gitmodules raw
          Write-Host "+ type .gitmodules"
          type .gitmodules
          ""
          Run "git submodule status --recursive"

          Write-Host "+ (derive top-level submodule paths from .gitmodules)"
          $gm = Get-Content -Raw .gitmodules
          $paths = [regex]::Matches($gm, '^\s*path\s*=\s*(.+)$', 'Multiline') | ForEach-Object { $_.Groups[1].Value.Trim() }
          foreach ($p in $paths) {
            Run ("git submodule status -- " + $p)
          }

      - name: Generate TheRock manifest JSON & show contents
        shell: powershell
        run: |
          $ErrorActionPreference = "Stop"

          # Run the generator; capture the output filename the script prints
          $fname = (& python3 build_tools/generate_repo_manifest.py) 2>$null
          if (-not $fname) { throw "Failed to generate therock-manifest JSON." }

          # Make the path available to later steps (optional)
          "MANIFEST_FILE=$fname" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Print the JSON file exactly as written
          Write-Host "----- BEGIN therock-manifest ($fname) -----"
          Get-Content -Raw -LiteralPath $fname
          Write-Host "----- END therock-manifest -----"
