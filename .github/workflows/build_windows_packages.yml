name: Build Windows Packages

on:
  workflow_dispatch:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
        default: gfx110X-dgpu
      extra_cmake_options:
        type: string
        default: "-DBUILD_TESTING=ON"

  workflow_call:
    inputs:
      package_version:
        type: string
        default: ADHOCBUILD
      amdgpu_families:
        type: string
      extra_cmake_options:
        type: string
        default: "-DBUILD_TESTING=ON"

permissions:
  contents: read
  id-token: write

jobs:
  build_windows_packages:
    name: Build Windows Packages
    runs-on: azure-windows-scale-rocm
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: true
    env:
      BASE_BUILD_DIR_POWERSHELL: B:\tmpbuild
      CACHE_DIR: "${{github.workspace}}/.cache"
      CCACHE_DIR: "${{github.workspace}}/.cache/ccache"
      CCACHE_MAXSIZE: "4000M"
      TEATIME_FORCE_INTERACTIVE: 0
      AMDGPU_FAMILIES: ${{ inputs.amdgpu_families }}
    steps:
      - name: "Create build dir"
        shell: powershell
        run: |
          $buildDir = "$env:BASE_BUILD_DIR_POWERSHELL\"
          echo "BUILD_DIR_POWERSHELL=$buildDir" >> $env:GITHUB_ENV
          mkdir "$buildDir"
          Write-Host "Generated Build Directory: $buildDir"
          $bashBuildDir = $buildDir -replace '\\', '/' -replace '^B:', '/b'
          echo  "BUILD_DIR_BASH=$bashBuildDir" >> $env:GITHUB_ENV
          Write-Host "Converted Build Directory For Bash: $bashBuildDir"
          $fs = Get-PSDrive -PSProvider "FileSystem"
          $fsout = $fs | Select-Object -Property Name,Used,Free,Root
          $fsout | % {$_.Used/=1GB;$_.Free/=1GB;$_} | Write-Host
          get-disk | Select-object @{Name="Size(GB)";Expression={$_.Size/1GB}} | Write-Host

      - name: "Checking out repository"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
        with:
          python-version: "3.12"

      - name: Install python deps
        run: |
          pip install -r requirements.txt

      - name: Install requirements
        run: |
          choco install --no-progress -y ccache
          choco install --no-progress -y ninja
          choco install --no-progress -y strawberryperl
          echo "$PATH;C:\Strawberry\c\bin" >> $GITHUB_PATH
          choco install --no-progress -y awscli
          echo "$PATH;C:\Program Files\Amazon\AWSCLIV2" >> $GITHUB_PATH

      # After other installs, so MSVC get priority in the PATH.
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0

      - name: Runner Health Settings
        run: |
          echo "CCACHE_DIR=${CCACHE_DIR}"
          df -h
          mkdir -p $CCACHE_DIR

          echo "cmake: $(which cmake)"
          cmake --version
          echo "ninja: $(which ninja)"
          ninja --version
          echo "CC: $CC"
          echo "CXX: $CXX"

          echo "python: $(which python), python3: $(which python3)"
          python --version

          echo "gcc: $(which gcc)"
          gcc --version
          echo "perl: $(which perl)"
          perl --version
          echo "gfortran: $(which gfortran)"
          gfortran --version

          echo "Git version: $(git --version)"
          git config fetch.parallel 10
          nthreads=$(nproc --all)
          echo [*] Logical Processors to be used: $nthreads...

      # TODO: We shouldn't be using a cache on actual release branches, but it
      # really helps for iteration time.
      - name: Enable cache
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-build-packages-v3-${{ github.sha }}
          restore-keys: |
            windows-build-packages-v3-

      - name: Fetch sources
        run: |
          python ./build_tools/fetch_sources.py --jobs 96

      - name: Checkout closed source AMDGPU/ROCm interop library folder
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: nod-ai/amdgpu-windows-interop
          path: amdgpu-windows-interop
          lfs: true

      - name: Configure Projects
        run: |
          # clear cache before build and after download
          ccache -z

          # Generate a new build id.
          package_version="${{ inputs.package_version }}"
          amdgpu_families="${{ inputs.amdgpu_families }}"
          extra_cmake_options="${{ inputs.extra_cmake_options }}"
          echo "Building package ${package_version}"

          # Build.
          cmake -B "${{ env.BUILD_DIR_BASH }}" -GNinja . \
            -DCMAKE_C_COMPILER="${{ env.VCToolsInstallDir }}/bin/Hostx64/x64/cl.exe" \
            -DCMAKE_CXX_COMPILER="${{ env.VCToolsInstallDir }}/bin/Hostx64/x64/cl.exe" \
            -DCMAKE_LINKER="${{ env.VCToolsInstallDir }}/bin/Hostx64/x64/link.exe" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_MSVC_DEBUG_INFORMATION_FORMAT=Embedded \
            -DTHEROCK_AMDGPU_FAMILIES=${amdgpu_families} \
            -DTHEROCK_PACKAGE_VERSION="${package_version}" \
            -DTHEROCK_AMDGPU_WINDOWS_INTEROP_DIR=${GITHUB_WORKSPACE}/amdgpu-windows-interop \
            -DTHEROCK_ENABLE_BLAS=OFF \
            -DTHEROCK_ENABLE_SPARSE=OFF \
            -DTHEROCK_ENABLE_SOLVER=OFF \
            -DTHEROCK_ENABLE_ML_LIBS=OFF \
            ${extra_cmake_options}

      - name: Build Projects
        run: cmake --build "${{ env.BUILD_DIR_BASH }}" -j $(nproc --all) --target therock-archives therock-dist

      - name: Report
        if: ${{ !cancelled() }}
        run: |
          echo "Build dir:"
          echo "------------"
          ls -lh "${{ env.BUILD_DIR_BASH }}"
          echo "Artifact Archives:"
          echo "------------------"
          ls -lh "${{ env.BUILD_DIR_BASH }}"/artifacts/*.tar.xz
          echo "Artifacts:"
          echo "----------"
          du -h -d 1 "${{ env.BUILD_DIR_BASH }}"/artifacts
          echo "CCache Stats:"
          echo "-------------"
          ccache -s

      - name: Save cache
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        if: always()
        with:
          path: ${{ env.CACHE_DIR }}
          key: windows-build-packages-v3-${{ github.sha }}

      - name: "Build size report"
        if: always()
        shell: powershell
        run: |
          $fs = Get-PSDrive -PSProvider "FileSystem"
          $fsout = $fs | Select-Object -Property Name,Used,Free,Root
          $fsout | % {$_.Used/=1GB;$_.Free/=1GB;$_} | Write-Host
          get-disk | Select-object @{Name="Size(GB)";Expression={$_.Size/1GB}} | Write-Host

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@ececac1a45f3b08a01d2dd070d28d111c5fe6722 # v4.1.0
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::692859939525:role/therock-artifacts

      # TODO: Move to script
      - name: Create Index Files
        run: |
          curl --silent --fail --show-error --location \
            https://raw.githubusercontent.com/joshbrunty/Indexer/6d8cbfd15d3853b482e6a49f2d875ded9188b721/indexer.py \
            --output ${{ env.BUILD_DIR_BASH }}/indexer.py
          python ${{ env.BUILD_DIR_BASH }}/indexer.py -f '*.tar.xz*' ${{ env.BUILD_DIR_BASH }}/artifacts/
          python ${{ env.BUILD_DIR_BASH }}/indexer.py -f '*.log' ${{ env.BUILD_DIR_BASH }}/logs/
          sed -i 's,a href="..",a href="../../index-${{env.AMDGPU_FAMILIES}}.html",g' ${{ env.BUILD_DIR_BASH }}/logs/index.html

      # TODO: Move to script
      - name: Upload Artifacts
        shell: powershell
        run: |
          $Env:PATH += ";C:\Program Files\Amazon\AWSCLIV2"
          aws s3 cp ${{ env.BASE_BUILD_DIR_POWERSHELL }}\artifacts s3://therock-artifacts/${{github.run_id}}-windows/ `
            --recursive --no-follow-symlinks `
            --exclude "*" `
            --include "*.tar.xz*"
          aws s3 cp ${{ env.BASE_BUILD_DIR_POWERSHELL }}\artifacts\index.html s3://therock-artifacts/${{github.run_id}}-windows/index-${{env.AMDGPU_FAMILIES}}.html

      # TODO: Move to script
      - name: Upload Logs
        shell: powershell
        run: |
          $Env:PATH += ";C:\Program Files\Amazon\AWSCLIV2"
          aws s3 cp ${{ env.BASE_BUILD_DIR_POWERSHELL }}\logs s3://therock-artifacts/${{github.run_id}}-windows/logs/${{env.AMDGPU_FAMILIES}}/ `
            --recursive `
            --content-type="text/plain" `
            --exclude "*" `
            --include "*.log"
          aws s3 cp ${{ env.BASE_BUILD_DIR_POWERSHELL }}\logs\index.html s3://therock-artifacts/${{github.run_id}}-windows/logs/${{env.AMDGPU_FAMILIES}}/

      - name: Add Links to Job Summary
        run: |
          echo '* [Artifacts](https://therock-artifacts.s3.us-east-2.amazonaws.com/${{github.run_id}}-windows/index-${{env.AMDGPU_FAMILIES}}.html)' >> $GITHUB_STEP_SUMMARY
          echo '* [Build logs](https://therock-artifacts.s3.us-east-2.amazonaws.com/${{github.run_id}}-windows/logs/${{env.AMDGPU_FAMILIES}}/index.html)' >> $GITHUB_STEP_SUMMARY
