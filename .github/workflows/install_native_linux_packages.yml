name: Install Native Linux Packages

on:
  push:
    branches:
      - rponnuru_native_installation
  workflow_call:
    inputs:
      amdgpu_family:
        description: gfx arch for creating the artifact fetch url
        required: true
        type: string
        default: gfx94X-dcgpu
      artifact_run_id:
        description: workflow run id to download the artifacts from
        type: string
      rocm_version:
        description: ROCm version to append to the package( Like 8.0.0 or 8.1.0).
        required: true
        type: string
        default: "0.0.1"
      package_type:
        description: Specify whether debian or rpm packages are needed (deb or rpm).
        required: true
        type: string
      package_suffix:
        description: The suffix to be added to package name(build_no or master or rc or combiantion).
        required: false
        type: string
  workflow_dispatch:
    inputs:
      amdgpu_family:
        type: string
        default: gfx94X-dcgpu
      artifact_run_id:
        description: workflow run id to download the artifacts from
        type: string
      rocm_version:
        description: ROCm version to append to the package( Like 8.0.0 or 8.1.0)
        type: string
        default: "0.0.1"
      package_type:
        description: Specify whether debian or rpm packages are needed (deb or rpm).
        required: true
        type: choice
        options:
          - rpm
          - deb
        default: "rpm"
      package_suffix:
        description: The suffix to be added to package name(build_no or master or rc or combiantion).
        type: false
        default: "test"

permissions:
  id-token: write
  contents: read

jobs:
  install_native_packages:
    name: Install Linux native Packages
    strategy:
      fail-fast: false
    runs-on: ${{ github.repository_owner == 'ROCm' && 'azure-linux-scale-rocm' || 'ubuntu-24.04' }}
    env:
      BUILD_IMAGE: ghcr.io/rocm/therock_build_manylinux_x86_64@sha256:3ac188c17f88f08ce522297b616d8308361b8e9a9b31bcc3c3bbb9429b1efa6c
      ARTIFACT_RUN_ID: ${{ inputs.artifact_run_id || github.run_id }}
      AMDGPU_FAIMLY: ${{ inputs.amdgpu_family }}
      ROCM_VERSION: ${{ inputs.rocm_version}}
      PACKAGE_SUFFIX: ${{ (inputs.package_suffix || github.event.inputs.package_suffix || 'nightly') }}-${{ inputs.artifact_run_id || github.run_id }}
      OUTPUT_DIR: ${{ github.workspace }}/output
      ARTIFACTS_DIR: ${{ github.workspace }}/output/artifacts
      PACKAGE_DIST_DIR: ${{ github.workspace }}/output/packages
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.12'
      - name: Install Python requirements
        run: |
          pip install pyelftools boto3 jinja2

      - name: Install System requirements
        run: |
          # Install the needed tools for creating rpm / deb packages
          # Also install tools for creating repo files
          sudo apt update
          sudo apt install -y llvm
          sudo apt install -y rpm debhelper-compat build-essential
          sudo apt install -y dpkg-dev createrepo-c

      - name: Install AWS CLI
        run: bash ./dockerfiles/install_awscli.sh

          #- name: Configure AWS Credentials for non-forked repos
          #uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
          #with:
          #aws-region: us-east-2
          #role-to-assume: arn:aws:iam::692859939525:role/therock-artifacts-external

      - name: Install non-composite versioned packages (Python script)
        run: |
          python3 ./build_tools/install_packages.py --dest-dir ${{ env.ARTIFACT_RUN_ID}} --version true --package_json build_tools/packaging/linux/package.json --composite=false --amdgpu_family ${{ env.AMDGPU_FAMILY }} --upload post --rocm-version  ${{ env.ROCM_VERSION }} 

      - name: Install non-composite non-versioned packages (Python script)
        run: |
          python3 ./build_tools/install_packages.py --dest-dir ${{ env.ARTIFACT_RUN_ID}} --version false --package_json build_tools/packaging/linux/package.json --composite=false --amdgpu_family ${{ env.AMDGPU_FAMILY }} --upload post --rocm-version  ${{ env.ROCM_VERSION }}

      - name: Install composite versioned packages (Python script)
        run: |
          python3 ./build_tools/install_packages.py --dest-dir ${{ env.ARTIFACT_RUN_ID}} --version true --package_json build_tools/packaging/linux/package.json --composite=true --amdgpu_family ${{ env.AMDGPU_FAMILY }} --upload post --rocm-version  ${{ env.ROCM_VERSION }}

      - name: Install composite non-versioned packages (Python script)
        run: |
          python3 ./build_tools/install_packages.py --dest-dir ${{ env.ARTIFACT_RUN_ID}} --version false --package_json build_tools/packaging/linux/package.json --composite=true --amdgpu_family ${{ env.AMDGPU_FAMILY }} --upload post --rocm-version  ${{ env.ROCM_VERSION }}
